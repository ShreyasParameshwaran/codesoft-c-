
  name: PlatformIO CI
  
  on: [push]
  
  jobs:
    build:
      runs-on: ubuntu-latest
  
      steps:
        # Checkout the repository
        - uses: actions/checkout@v2
  
        # Set up Python and install PlatformIO
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.x'
  
        - name: Install PlatformIO
          run: |
            python -m pip install --upgrade pip
            pip install platformio
  
        # Build the project
        - name: Build Project
          run: platformio run
  
        # Run static analysis (Cppcheck)
        - name: Run PIO Check
          run: pio check
  
        # Upload the built binary as an artifact
        - name: Upload Binary Artifact
          uses: actions/upload-artifact@v4
          with:
            name: firmware-binary
            path: .pio/build/esp32dev/firmware.bin
            if-no-files-found: ignore
            retention-days: 7 # Optional: Keeps the artifact for 7 days
  
        # Install MinIO client (mc)
        - name: Install MinIO Client (mc)
          run: |
            curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x mc
            sudo mv mc /usr/local/bin/
  
        # Configure MinIO client with the running MinIO instance
        - name: Configure MinIO Client
          run: |
            mc alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}
  
        # Use the existing bucket in MinIO
        - name: Check Bucket Exists
          run: |
            echo "Using existing firmware-bucket"
            mc ls myminio/firmware-bucket/
  
        # Extract firmware version
        - name: Extract Firmware Version
          id: extract_version
          run: |
            VERSION=$(grep '#define FIRMWARE_VERSION' src/version.h | awk '{print $3}' | tr -d '"')
            echo "Firmware version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
  
        # Upload the built binary to MinIO with repository name and version as prefix
        - name: Upload Binary to MinIO
          run: |
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
            VERSION="${{ env.VERSION }}"
            mc cp .pio/build/esp32dev/firmware.bin myminio/firmware-bucket/${REPO_NAME}-firmware-${VERSION}.bin
          if: success()
  
        - name: Update Firmware API
          run: |
            # Get repository name
            REPO_NAME="${GITHUB_REPOSITORY#*/}"
  
            # Prepare the JSON payload with the MinIO URL and repository ID
            MINIO_URL="${{ secrets.MINIO_ENDPOINT }}/firmware-bucket/${REPO_NAME}-firmware-${VERSION}.bin"
  
            # Make the API request
            curl -X POST https://api.sector-iot.space/api/firmware/             -H "Content-Type: application/json"             -H "x-api-key: ${{ secrets.API_KEY }}"             -d '{
              "url": "${MINIO_URL}",
              "repositoryId": "${{ secrets.REPOSITORY_ID }}",
              "version": "${VERSION}"
            }'
  